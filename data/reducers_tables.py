import pandas as pd

# Column headers from the first image
columns = [
    "Series", "Size", "Ratio", "Limit for repeated peak torque [Nm]",
    "Limit for average torque [Nm]", "Rated torque at rated speed 2000 rpm [Nm]",
    "Limit for momentary peak torque [Nm]", "Max. input speed [rpm]",
    "Limit for average input speed [rpm]", "Moment of inertia [x10^-4]",
    "Weight"
]

# Data extracted from the 3 images
reducers_data = [
    ["HFUS", 11,   50,   8.3,   5.5,   3.5,   17.0, 8500, 3500, 0.080, 0.53],
	["HFUS", 11,  100,  11.0,   8.9,   5.0,   25.0, 8500, 1100, 0.080, 0.53],
	["HFUS", 14,   30,   9.0,   6.8,   4.0,   17.0, 8500, 3500, 0.091, 0.71],
	["SHG", 14,   50,  23.0,   9.0,   7.0,   46.0, 8500, 1100, 0.091, 0.71],
	["SHG" , 14,   80,  30.0,  14.0,  10.0,   61.0, 8500, 3500, 0.091, 0.71],
	["SHG" , 14,  100,  36.0,  14.0,  10.0,   70.0, 8500, 1100, 0.091, 0.71],
	["HFUS", 17,   30,  16.0,  12.0,   8.8,   30.0, 7300, 3500, 0.193, 1.00],
	["SHG", 17,   50,  44.0,  34.0,  21.0,   91.0, 7300, 1100, 0.193, 1.00],
	["SHG" , 17,   80,  56.0,  35.0,  29.0,  113.0, 7300, 3500, 0.193, 1.00],
	["SHG" , 17,  100,  70.0,  51.0,  31.0,  143.0, 7300, 1100, 0.193, 1.00],
	["SHG" , 17,  120,  70.0,  51.0,  31.0,  112.0, 7300, 1100, 0.193, 1.00],
	["HFUS", 20,   30,  27.0,  20.0,  15.0,   50.0, 6500, 3500, 0.404, 1.38],
	["SHG" , 20,   50,  73.0,  44.0,  33.0,  127.0, 6500, 3500, 0.404, 1.38],
	["SHG" , 20,   80,  96.0,  61.0,  44.0,  165.0, 6500, 3500, 0.404, 1.38],
	["SHG" , 20,  100, 107.0,  64.0,  52.0,  191.0, 6500, 1100, 0.404, 1.38],
	["SHG" , 20,  120, 113.0,  64.0,  52.0,  191.0, 6500, 1100, 0.404, 1.38],
	["SHG" , 20,  160, 120.0,  64.0,  52.0,  191.0, 6500, 1100, 0.404, 1.38],
	["HFUS", 25,   30,  50.0,  38.0,  27.0,   95.0, 5600, 3500, 1.070, 2.10],
	["SHG" , 25,   50, 127.0,  72.0,  51.0,  242.0, 5600, 3500, 1.070, 2.10],
	["SHG" , 25,   80, 178.0, 113.0,  82.0,  332.0, 5600, 3500, 1.070, 2.10],
	["SHG" , 25,  100, 204.0, 140.0,  87.0,  369.0, 5600, 3500, 1.070, 2.10],
	["SHG" , 25,  120, 217.0, 140.0,  87.0,  395.0, 5600, 3500, 1.070, 2.10],
	["SHG" , 25,  160, 229.0, 140.0,  87.0,  408.0, 5600, 3500, 1.070, 2.10],
	["HFUS", 32,   30, 100.0,  75.0,  54.0,  200.0, 4800, 3500, 2.850, 4.50],
	["SHG" , 32,   50, 281.0, 140.0,  99.0,  497.0, 4800, 3500, 2.850, 4.50],
	["SHG" , 32,   80, 395.0, 217.0, 153.0,  738.0, 4800, 3500, 2.850, 4.50],
	["SHG" , 32,  100, 433.0, 281.0, 178.0,  841.0, 4800, 3500, 2.850, 4.50],
	["SHG" , 32,  120, 459.0, 281.0, 178.0,  892.0, 4800, 3500, 2.850, 4.50],
	["SHG" , 32,  160, 484.0, 281.0, 178.0,  892.0, 4800, 3500, 2.850, 4.50],
	["SHG" , 40,   50, 523.0, 255.0, 178.0,  892.0, 4000, 3000, 9.280, 7.70],
	["SHG" , 40,   80, 675.0, 369.0, 268.0, 1270.0, 4000, 3000, 9.280, 7.70],
	["SHG" , 40,  100, 738.0, 484.0, 345.0, 1400.0, 4000,  950, 9.280, 7.70],
	["SHG" , 40,  120, 802.0, 586.0, 382.0, 1530.0, 4000,  950, 9.280, 7.70],
	["SHG" , 40,  160, 841.0, 586.0, 382.0, 1530.0, 4000,  950, 9.280, 7.70],
	["SHG" , 45,   50, 650.0, 345.0, 229.0, 1235.0, 3800, 3000, 13.80, 10.00],
	["SHG" , 45,   80, 918.0, 507.0, 407.0, 1651.0, 3800, 900, 13.80, 10.00],
	["SHG" , 45,  100, 982.0, 650.0, 459.0, 2041.0, 3800, 3000,13.80, 10.00],
	["SHG" , 45,  120,1070.0, 806.0, 523.0, 2288.0, 3800,  900,13.80, 10.00],
	["SHG" , 45,  160,1147.0, 819.0, 523.0, 2483.0, 3800, 3000,13.80, 10.00],
	["HFUS", 50,   50, 715.0, 175.0, 122.0, 1430.0, 3500, 2500,25.20, 14.50],
	["HFUS", 50,   80,1223.0, 675.0, 484.0, 2418.0, 3500,  850,25.20, 14.50],
	["SHG" , 50,  100,1274.0, 866.0, 611.0, 2678.0, 3500, 2500,25.20, 14.50],
	["SHG" , 50,  120,1404.0,1057.0, 688.0, 2678.0, 3500,  850,25.20, 14.50],
	["SHG" , 50,  160,1534.0,1096.0, 688.0, 3185.0, 3500, 2500,25.20, 14.50],
	["HFUS", 58,   50,1020.0, 260.0, 176.0, 1960.0, 3000, 2200,49.50, 20.00],
	["HFUS", 58,   80,1924.0,1001.0, 714.0, 3185.0, 3000,  800,49.50, 20.00],
	["SHG" , 58,  100,2067.0,1378.0, 905.0, 4134.0, 3000, 2200,49.50, 20.00],
	["SHG" , 58,  120,2236.0,1547.0, 969.0, 4329.0, 3000,  800,49.50, 20.00],
	["SHG" , 58,  160,2392.0,1573.0, 969.0, 4459.0, 3000, 2200,49.50, 20.00],
	["SHG" , 65,   80,2743.0,1352.0, 969.0, 4836.0, 2800, 1900,94.10, 28.50],
	["SHG" , 65,  100,2990.0,1976.0,1236.0, 6175.0, 2800,  800,94.10, 28.50],
	["SHG" , 65,  120,3263.0,2041.0,1236.0, 6175.0, 2800,  800,94.10, 28.50],
	["SHG" , 65,  160,3419.0,2041.0,1236.0, 6175.0, 2800,  800,94.10, 28.50],
    # 14
    ["HFUC", 14, 30, 9.0, 6.8, 4.0, 17.0, 8500, 3500, "0.033x10^-4", (0.52, 0.32)],
    ["CSG" , 14, 50, 23, 9, 7, 46, 8500, 3500, "0.033x10^-4", (0.52, 0.32)],
    ["CSG" , 14, 80, 30, 14, 10, 58, 8500, 3500, "0.033x10^-4", (0.52, 0.32)],
    ["CSG" , 14, 100, 36, 14, 10, 58, 8500, 3500, "0.033x10^-4", (0.52, 0.32)],

    # 17
    ["HFUC", 17, 30, 16.0, 12.0, 8.8, 30.0, 7300, 3500, "0.079x10^-4", (0.68, 0.46)],
    ["CSG" , 17, 50, 44, 34, 21, 91, 7300, 3500, "0.079x10^-4", (0.68, 0.46)],
    ["CSG" , 17, 80, 56, 35, 29, 109, 7300, 3500, "0.079x10^-4", (0.68, 0.46)],
    ["CSG" , 17, 100, 70, 51, 31, 109, 7300, 3500, "0.079x10^-4", (0.68, 0.46)],
    ["CSG" , 17, 120, 70, 51, 31, 109, 7300, 3500, "0.079x10^-4", (0.68, 0.46)],

    # 20
    ["HFUC", 20, 30, 27, 20, 15, 50, 6500, 3500, "0.193x10^-4", (0.98, 0.64)],
    ["CSG" , 20, 50, 73, 44, 33, 127, 6500, 3500, "0.193x10^-4", (0.98, 0.64)],
    ["CSG" , 20, 80, 96, 61, 44, 165, 6500, 3500, "0.193x10^-4", (0.98, 0.64)],
    ["CSG" , 20, 100, 107, 64, 52, 191, 6500, 3500, "0.193x10^-4", (0.98, 0.64)],
    ["CSG" , 20, 120, 113, 64, 52, 191, 6500, 3500, "0.193x10^-4", (0.98, 0.64)],
    ["CSG" , 20, 160, 120, 64, 52, 191, 6500, 3500, "0.193x10^-4", (0.98, 0.64)],

    # 25
    ["HFUC", 25, 30, 50, 38, 27, 95, 5600, 3500, "0.413x10^-4", (1.5, 1.10)],
    ["CSG" , 25, 50, 127, 72, 51, 242, 5600, 3500, "0.413x10^-4", (1.5, 1.10)],
    ["CSG" , 25, 80, 178, 113, 82, 332, 5600, 3500, "0.413x10^-4", (1.5, 1.10)],
    ["CSG" , 25, 100, 204, 140, 87, 369, 5600, 3500, "0.413x10^-4", (1.5, 1.10)],
    ["CSG" , 25, 120, 217, 140, 87, 395, 5600, 3500, "0.413x10^-4", (1.5, 1.10)],
    ["CSG" , 25, 160, 229, 140, 87, 408, 5600, 3500, "0.413x10^-4", (1.5, 1.10)],

    # 32
    ["HFUC", 32, 30, 100, 75, 54, 200, 4800, 3500, "1.690x10^-4", (3.2, 2.20)],
    ["CSG" , 32, 50, 281, 140, 99, 497, 4800, 3500, "1.690x10^-4", (3.2, 2.20)],
    ["CSG" , 32, 80, 395, 217, 153, 738, 4800, 3500, "1.690x10^-4", (3.2, 2.20)],
    ["CSG" , 32, 100, 433, 281, 178, 841, 4800, 3500, "1.690x10^-4", (3.2, 2.20)],
    ["CSG" , 32, 120, 459, 281, 178, 892, 4800, 3500, "1.690x10^-4", (3.2, 2.20)],
    ["CSG" , 32, 160, 484, 281, 178, 892, 4800, 3500, "1.690x10^-4", (3.2, 2.20)],

    # 40
    ["CSG" , 40, 50, 523, 255, 178, 892, 4000, 3000, "4.500x10^-4", (5, 3.50)],
    ["CSG" , 40, 80, 675, 369, 268, 1270, 4000, 3000, "4.500x10^-4", (5, 3.50)],
    ["CSG" , 40, 100, 738, 484, 345, 1400, 4000, 3000, "4.500x10^-4", (5, 3.50)],
    ["CSG" , 40, 120, 802, 586, 382, 1530, 4000, 3000, "4.500x10^-4", (5, 3.50)],
    ["CSG" , 40, 160, 841, 586, 382, 1530, 4000, 3000, "4.500x10^-4", (5, 3.50)],

    # 45
    ["CSG" , 45, 50, 650, 345, 229, 1235, 3800, 3000, "8.680x10^-4", (7, 5.10)],
    ["CSG" , 45, 80, 918, 507, 407, 1651, 3800, 3000, "8.680x10^-4", (7, 5.10)],
    ["CSG" , 45, 100, 982, 650, 459, 2041, 3800, 3000, "8.680x10^-4", (7, 5.10)],
    ["CSG" , 45, 120, 1070, 806, 523, 2288, 3800, 3000, "8.680x10^-4", (7, 5.10)],
    ["CSG" , 45, 160, 1147, 819, 523, 2483, 3800, 3000, "8.680x10^-4", (7, 5.10)],

    # 50
    ["HFUC", 50, 50, 715, 175, 122, 1430, 3500, 2500, "12.50x10^-4", (8.9, 7.00)],
    ["CSG" , 50, 80, 1223, 675, 484, 2418, 3500, 2500, "12.50x10^-4", (8.9, 7.00)],
    ["CSG" , 50, 100, 1274, 866, 611, 2678, 3500, 2500, "12.50x10^-4", (8.9, 7.00)],
    ["CSG" , 50, 120, 1404, 1057, 688, 2678, 3500, 2500, "12.50x10^-4", (8.9, 7.00)],
    ["CSG" , 50, 160, 1534, 1096, 688, 3185, 3500, 2500, "12.50x10^-4", (8.9, 7.00)],

    # 58
    ["HFUC", 58, 50, 1020, 260, 176, 1960, 3000, 2200, "27.30x10^-4", (14.6, 11.30)],
    ["CSG" , 58, 80, 1924, 1001, 714, 3185, 3000, 2200, "27.30x10^-4", (14.6, 11.30)],
    ["CSG" , 58, 100, 2067, 1378, 905, 4134, 3000, 2200, "27.30x10^-4", (14.6, 11.30)],
    ["CSG" , 58, 120, 2236, 1547, 969, 4329, 3000, 2200, "27.30x10^-4", (14.6, 11.30)],
    ["CSG" , 58, 160, 2392, 1573, 969, 4459, 3000, 2200, "27.30x10^-4", (14.6, 11.30)],

    # 65
    ["HFUC", 65, 50, 1420, 360, 245, 2830, 2800, 1900, "46.80x10^-4", (20.90, 16.20)],
    ["CSG" , 65, 80, 2743, 1352, 969, 4836, 2800, 1900, "46.80x10^-4", (20.90, 16.20)],
    ["CSG" , 65, 100, 2990, 1976, 1236, 6175, 2800, 1900, "46.80x10^-4", (20.90, 16.20)],
    ["CSG" , 65, 120, 3263, 2041, 1236, 6175, 2800, 1900, "46.80x10^-4", (20.90, 16.20)],
    ["CSG" , 65, 160, 3419, 2041, 1236, 6175, 2800, 1900, "46.80x10^-4", (20.90, 16.20)],

    # 80
    ["HFUC", 80, 50, 2440, 630, 436, 4870, 2300, 1500, "122.0x10^-4", (30.80, None)],
    ["HFUC", 80, 80, 3430, 1830, 1320, 6590, 2300, 1500, "122.0x10^-4", (30.80, None)],
    ["HFUC", 80, 100, 4220, 2360, 1700, 7910, 2300, 1500, "122.0x10^-4", (30.80, None)],
    ["HFUC", 80, 120, 4590, 3130, 1990, 7910, 2300, 1500, "122.0x10^-4", (30.80, None)],
    ["HFUC", 80, 160, 4910, 3130, 1990, 7910, 2300, 1500, "122.0x10^-4", (30.80, None)],

    # 90
    ["HFUC", 90, 50, 3530, 860, 590, 6660, 2000, 1300, "214.0x10^-4", (42.50, None)],
    ["HFUC", 90, 80, 3990, 2510, 1550, 7250, 2000, 1300, "214.0x10^-4", (42.50, None)],
    ["HFUC", 90, 100, 5680, 3360, 2270, 9020, 2000, 1300, "214.0x10^-4", (42.50, None)],
    ["HFUC", 90, 120, 6160, 4300, 2570, 9800, 2000, 1300, "214.0x10^-4", (42.50, None)],
    ["HFUC", 90, 160, 6840, 4920, 2700, 11300, 2000, 1300, "214.0x10^-4", (42.50, None)],

]

import pandas as pd
shg_torsional_data = pd.DataFrame({
        "Size": [11, 14, 17, 20, 25, 32, 40, 45, 50, 58, 65],
        "T1 [Nm]": [0.8, 2.0, 3.9, 7.0, 14, 29, 54, 76, 108, 168, 235],
        "T2 [Nm]": [2.0, 6.9, 12, 25, 48, 108, 196, 275, 382, 598, 843],
        "K3_i30 [x10^4 Nm/rad]": [None, 0.34, 0.67, 1.10, 2.10, 4.90, None, None, None, None, None],
        "K2_i30 [x10^4 Nm/rad]": [None, 0.24, 0.44, 0.71, 1.30, 3.00, None, None, None, None, None],
        "K1_i30 [x10^4 Nm/rad]": [None, 0.19, 0.34, 0.57, 1.00, 2.40, None, None, None, None, None],
        "K3_i50 [x10^4 Nm/rad]": [0.32, 0.57, 1.30, 2.30, 4.40, 9.80, 18.0, 26.0, 34.0, 54.0, None],
        "K2_i50 [x10^4 Nm/rad]": [0.30, 0.47, 1.10, 1.80, 3.40, 7.80, 14.0, 20.0, 28.0, 44.0, None],
        "K1_i50 [x10^4 Nm/rad]": [0.22, 0.34, 0.81, 1.30, 2.50, 5.40, 10.0, 15.0, 20.0, 31.0, None],
        "K3_i80 [x10^4 Nm/rad]": [0.44, 0.71, 1.60, 2.90, 5.70, 12.0, 23.0, 33.0, 44.0, 71.0, 98.0],
        "K2_i80 [x10^4 Nm/rad]": [0.34, 0.61, 1.40, 2.50, 5.00, 11.0, 20.0, 29.0, 40.0, 61.0, 88.0],
        "K1_i80 [x10^4 Nm/rad]": [0.27, 0.47, 1.00, 1.60, 3.10, 6.70, 13.0, 18.0, 25.0, 40.0, 54.0],
    })

csg_torsional_data = pd.DataFrame({
        "Size": [14, 17, 20, 25, 32, 40, 45, 50, 58, 65, 80, 90],
        "T1 [Nm]": [0.2, 3.9, 7.0, 14, 29, 54, 76, 108, 168, 235, 430, 618],
        "T2 [Nm]": [6.9, 12, 25, 48, 108, 196, 275, 382, 598, 843, 1570, 2260],
        "K3_i30 [x10^4 Nm/rad]": [0.34, 0.67, 1.10, 2.10, 4.90, None, None, None, None, None, None, None],
        "K2_i30 [x10^4 Nm/rad]": [0.24, 0.44, 0.71, 1.30, 3.00, None, None, None, None, None, None, None],
        "K1_i30 [x10^4 Nm/rad]": [0.19, 0.34, 0.57, 1.00, 2.40, None, None, None, None, None, None, None],
        "K3_i50 [x10^4 Nm/rad]": [0.57, 1.30, 2.30, 4.40, 9.80, 18.0, 26.0, 34.0, 54.0, 78.0, 145, 206],
        "K2_i50 [x10^4 Nm/rad]": [0.47, 1.10, 1.80, 3.40, 7.80, 14.0, 20.0, 28.0, 44.0, 61.0, 115, 162],
        "K1_i50 [x10^4 Nm/rad]": [0.34, 0.81, 1.30, 2.50, 5.40, 10.0, 15.0, 20.0, 31.0, 44.0, 81.0, 118],
        "K3_i80 [x10^4 Nm/rad]": [0.71, 1.60, 2.90, 5.70, 12.0, 23.0, 33.0, 44.0, 71.0, 98.0, 185, 263],
        "K2_i80 [x10^4 Nm/rad]": [0.61, 1.40, 2.50, 5.00, 11.0, 20.0, 29.0, 40.0, 61.0, 88.0, 162, 230],
        "K1_i80 [x10^4 Nm/rad]": [0.47, 1.00, 1.60, 3.10, 6.70, 13.0, 18.0, 25.0, 40.0, 54.0, 100, 145],
    })

#SGH and HFUS have the same torsional data
#CSG and HFUC have the same torsional data
torsional_data = {
    "SHG" : shg_torsional_data,
    "HFUS" : shg_torsional_data,
    "CSG" : csg_torsional_data,
    "HFUC" : csg_torsional_data
}
resonance_frequency = {
    "Slowly rotating turntables": 4.0,
    "Base axes of slow moving welding robots (not laser welding)": 4.0,
    "Slowly rotating welding turntables": 4.0,
    "Gantry robot axes": 4.0,

    "Base axes of revolute robots": 8.0,
    "Hand axes of revolute robots with low requirements regarding dynamic performance": 8.0,
    "Tool revolvers": 8.0,
    "Tool magazines": 8.0,
    "Swivelling and positioning axes in medical and measuring devices": 8.0,

    "Standard applications in general mechanical engineering": 15.0,
    "Tilting axes": 15.0,
    "Palette changers": 15.0,
    "High dynamic tool changers": 15.0,
    "Revolvers and magazines": 15.0,
    "Hand axes of revolute robots": 15.0,
    "Scara robots": 15.0,
    "Gantry robots": 15.0,
    "Polishing robots": 15.0,
    "Dynamic welding turntables": 15.0,
    "Base axes of welding robots (laser welding)": 15.0,
    "Swivelling and positioning axes of medical equipment": 15.0,

    "B / C axes in 5 axis grinding machines": 20.0,
    "Welding robot hand axes (laser welding)": 20.0,
    "Milling heads for plastics machining": 20.0,

    "C axes in turning machines": 25.0,
    "Milling heads light metal machining": 25.0,
    "Milling heads wood machining (chipboards etc.)": 25.0,

    "Milling heads for woodworking (hardwood etc.)": 30.0
}

import pandas as pd

# --- SHG table ---
shg_output_bearing_data = {
    "Symbol [Unit]": [
        "Pitch circle diameter d_p [m]",
        "Distance R [m]",
        "Dynamic load rating C [N]",
        "Static load rating C0 [N]",
        "Permissible dynamic tilting moment M [Nm]",
        "Tilting moment stiffness K_B [Nm/arcmin]",
        "Permissible axial load F_a [N]",
        "Permissible radial load F_r [N]"
    ],
    11: [0.043, 0.0180, 5290, 7550, 74, 19, 1130, 757],
    14: [0.050, 0.0217, 5800, 8600, 74, 25, 1239, 830],
    17: [0.060, 0.0239, 10400, 16300, 124, 45, 2222, 1489],
    20: [0.070, 0.0255, 14600, 20000, 187, 74, 3119, 2090],
    25: [0.085, 0.0296, 21800, 35800, 258, 114, 4657, 3120],
    32: [0.111, 0.0364, 38200, 65400, 580, 290, 8161, 5468],
    40: [0.133, 0.0440, 43300, 81600, 849, 522, 9250, 6198],
    45: [0.154, 0.0475, 77600, 135000, 1127, 749, 16578, 11107],
    50: [0.170, 0.0525, 81600, 149000, 1487, 1020, 17433, 11680],
    58: [0.195, 0.0622, 87400, 171000, 2180, 1550, 18672, 12510],
    65: [0.218, 0.0720, 130000, 223000, 2740, 2155, 27773, 18608]
}

# --- CSG table ---
csg_output_bearing_data = {
    "Symbol [Unit]": [
        "Pitch circle diameter d_p [m]",
        "Distance R [m]",
        "Dynamic load rating C [N]",
        "Static load rating C0 [N]",
        "Permissible dynamic tilting moment M [Nm]",
        "Tilting moment stiffness K_B [Nm/arcmin]",
        "Permissible axial load F_a [N]",
        "Permissible radial load F_r [N]"
    ],
    14: [0.035, 0.0095, 4700, 6070, 41, 13, 1004, 673],
    17: [0.0425, 0.0095, 5290, 7550, 64, 22.5, 1130, 757],
    20: [0.050, 0.0095, 5780, 9000, 91, 37, 1235, 827],
    25: [0.062, 0.0115, 9600, 15100, 156, 70, 2051, 1374],
    32: [0.080, 0.0130, 15000, 25000, 313, 157, 3205, 2147],
    40: [0.096, 0.0145, 21300, 36500, 450, 265, 4550, 3049],
    45: [0.111, 0.0155, 23000, 42600, 686, 410, 4914, 3292],
    50: [0.119, 0.0180, 34800, 60200, 759, 497, 7435, 4981],
    58: [0.141, 0.0205, 51800, 90400, 1180, 823, 11066, 7414],
    65: [0.160, 0.0225, 55600, 103000, 1860, 1175, 11878, 7958],
    80: [0.185, 0.0260, 76400, 143000, 2740, 1900, 16322, 10936],
    90: [0.214, 0.0285, 83200, 168000, 4210, 2943, 17582, 11780]
}

# --- CSG-LW table ---
csglw_output_bearing_data = {
    "Symbol [Unit]": [
        "Pitch circle diameter d_p [m]",
        "Distance R [m]",
        "Dynamic load rating C [N]",
        "Static load rating C0 [N]",
        "Permissible dynamic tilting moment M [Nm]",
        "Tilting moment stiffness K_B [Nm/arcmin]",
        "Permissible axial load F_a [N]",
        "Permissible radial load F_r [N]"
    ],
    14: [0.035, 0.0093, 4700, 6070, 33.6, 10.5, 1004, 673],
    17: [0.043, 0.0091, 5290, 7550, 52.5, 18.6, 1130, 757],
    20: [0.050, 0.0098, 5780, 9000, 74.6, 30.5, 1235, 827],
    25: [0.064, 0.0118, 9600, 15100, 127.9, 57.6, 2051, 1374],
    32: [0.083, 0.0133, 15000, 25000, 256.7, 128.6, 3205, 2147],
    40: [0.096, 0.0148, 21300, 36500, 369.0, 217, 4550, 3049],
    45: [0.111, 0.0158, 23000, 42600, 562.5, 336, 4914, 3292],
    50: [0.119, 0.0180, 34800, 60200, 622, 407, 7435, 4981],
    58: [0.141, 0.0205, 51800, 90400, 838, 585, 11066, 7414],
    65: [0.160, 0.0185, 55600, 103000, 1525, 963, 11878, 7958]
}

df_output_bearing_shg = pd.DataFrame(shg_output_bearing_data).set_index("Symbol [Unit]")
df_output_bearing_csg = pd.DataFrame(csg_output_bearing_data).set_index("Symbol [Unit]")
df_output_bearing_csglw = pd.DataFrame(csglw_output_bearing_data).set_index("Symbol [Unit]")

output_bearing_data = {
    "SHG": df_output_bearing_shg,
    "HFUS": df_output_bearing_shg,  # HFUS has the same data as SHG
    "CSG": df_output_bearing_csg,
    "HFUC": df_output_bearing_csg,  # HFUC has the same data as CSG
    "CSG-LW": df_output_bearing_csglw
}

# Create DataFrame
reducers_df = pd.DataFrame(reducers_data, columns=columns)

#convert string contain scintifc notation to float * 1e4
def sci_to_float(s):
    if "x10^" in s:
        base, exp = s.split("x10^")
        return float(base)
#edit the inertia data in the reduces table to float for CSG and HFUC
inertia_reducers_CSG = reducers_df[(reducers_df["Series"] == "CSG") | (reducers_df["Series"] == "HFUC")]
reducers_df.loc[(reducers_df["Series"] == "CSG") | (reducers_df["Series"] == "HFUC"),"Moment of inertia [x10^-4]"] = (inertia_reducers_CSG["Moment of inertia [x10^-4]"].apply(sci_to_float))

'''# Example usage:
value = csg_torsional_stiffness_df.loc[csg_torsional_stiffness_df["Size"] == 40, "K1_i80 [x10^4 Nm/rad]"].values[0]
print(value)
'''